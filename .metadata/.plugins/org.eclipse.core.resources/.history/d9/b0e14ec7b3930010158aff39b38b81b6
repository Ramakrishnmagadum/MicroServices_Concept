package com.HotelService.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.HotelService.Entities.Hotel;
import com.HotelService.Services.HotelService;

@RestController
@RequestMapping("/hotels")
public class HotelController {

	@Autowired
	private HotelService hotelService;

//	@RequestBody --How it works 
//Incoming request: When a client sends data in the body of an HTTP request (for example, JSON in a POST or PUT request), Spring MVC reads that body.
//Deserialization: Spring uses an HttpMessageConverter (like Jackson for JSON) to convert that body into the corresponding Java object.
//Binding to method parameter: The converted object is assigned to the method parameter annotated with @RequestBody.
	@PostMapping
	public ResponseEntity<Hotel> createHotel(@RequestBody Hotel hotel) {
		return ResponseEntity.status(HttpStatus.CREATED).body(hotelService.create(hotel));
	}

	
	// get single
	@GetMapping("{hotelId}")
	public ResponseEntity<Hotel> getHotelById(@PathVariable("hotelId")String hotelId) {
		return ResponseEntity.status(HttpStatus.OK).body(hotelService.get(hotelId));
	}
	

	// get all
	@GetMapping
	public ResponseEntity<List<Hotel>> getHotelList() {
		return ResponseEntity.status(HttpStatus.OK).body(hotelService.getAll());
	}
}
