package com.AddressProject.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.AddressProject.Entity.ProductResponse;
import com.AddressProject.FeignClient.ProductServiceFeignClient;

@Service
public class OrderService {

	@Autowired
	private RestTemplate template;
	
	@Autowired
	DiscoveryClient discoveryClient;
	
	@Autowired
	LoadBalancerClient loadBalancerClient;
	
	//used FeignClient to helps communicate with other services (Like RestTemplate or WebClient)...
	@Autowired
	ProductServiceFeignClient productFeignClient;
	
//	Connectiog to the ProductService with RestTeample Help
	public ProductResponse getproductDetails() {
	
//		######-------   Using RestTemplate with DiscoveryClient() Object -----------########
		
////		This will give the service which are registered in DiscoveryService...   
////		But If Multiple Services are started then it won't do---> load balance,  this is disadvantages of this ..
////		Everytime it will send request to the same service ......to avoid that we will use LoadBalancerClient ...
//		List<ServiceInstance> instances = discoveryClient.getInstances("ProductProject");
//		ServiceInstance serviceInstance = instances.get(0);
//		System.out.println("serviceInstance.getUri()" +serviceInstance.getUri());
//		System.out.println("serviceInstance.toString()"+serviceInstance.toString());
//		System.out.println("serviceInstance.getHost()"+ serviceInstance.getHost());
//		System.out.println("serviceInstance.getPort()"+serviceInstance.getPort());
//		System.out.println("serviceInstance.getMetadata()"+serviceInstance.getMetadata());
//		System.out.println("serviceInstance.get"+serviceInstance.getServiceId());
//		ProductResponse Product = template.getForObject(serviceInstance.getUri()+"/product-app/product", ProductResponse.class);
		

//		######-------   Using RestTemplate with LoadBalancerClient() Object -----------########
				
//		This will give the service which are registered in DiscoveryService...   
//		And If Multiple Services are started then it will do---> load balance,  this is advantages of this ..
//		Everytime it will send request to the  service i sequences
//		ServiceInstance choose = loadBalancerClient.choose("ProductProject");
//		System.out.println("choose.getUri()"+choose.getUri());
//		System.out.println("choose.getHost()"+choose.getHost());
//		System.out.println("choose.getInstanceId()"+choose.getInstanceId());
//		System.out.println("choose.getPort()"+choose.getPort());
//		System.out.println("choose.getMetadata()"+choose.getMetadata().get("contextPath")); //###---> this will give the metadata which mentioned in Other Project ...
//		ProductResponse Product = template.getForObject(choose.getUri()+choose.getMetadata().get("contextPath")+"/product", ProductResponse.class);
		
		
		
		ProductResponse Product = template.getForObject("http://PRODUCTPROJECT/product-app/product", ProductResponse.class);
		
//		######--------  Using FeignClient    ---------#######
//		ProductResponse Product = productFeignClient.getproductResponse();
		return Product;
	}
}
